
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>class</q-w> AXI_Packet <q-w>extends</q-w> uvm_sequence_item;
<a name="2"><q-n>     2  </q-n></a>
<a name="3"><q-n>     3  </q-n></a>
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a>   <q-m>// Write address channel signals</q-m>
<a name="6"><q-n>     6  </q-n></a>   <q-m>// rand   bit [3:0]   AWID;</q-m>
<a name="7"><q-n>     7  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w> [31:0]  AWADDR;
<a name="8"><q-n>     8  </q-n></a>   <q-m>// rand   bit [3:0]   AWLEN;</q-m>
<a name="9"><q-n>     9  </q-n></a>   <q-m>// rand   bit [2:0]   AWSIZE;</q-m>
<a name="10"><q-n>     10  </q-n></a>   <q-m>// rand   bit [1:0]   AWBURST;</q-m>
<a name="11"><q-n>     11  </q-n></a>   <q-m>// rand   bit [1:0]   AWLOCK;</q-m>
<a name="12"><q-n>     12  </q-n></a>   <q-m>// rand   bit [3:0]   AWCACHE; </q-m>
<a name="13"><q-n>     13  </q-n></a>   <q-m>// rand   bit [2:0]   AWPROT;</q-m>
<a name="14"><q-n>     14  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         AWVALID;
<a name="15"><q-n>     15  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         AWREADY;
<a name="16"><q-n>     16  </q-n></a>
<a name="17"><q-n>     17  </q-n></a>   <q-m>// Write data channel signals</q-m>
<a name="18"><q-n>     18  </q-n></a>   <q-m>// rand   bit [3:0]   WID;</q-m>
<a name="19"><q-n>     19  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w> [31:0]  WDATA;
<a name="20"><q-n>     20  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w> [3:0]   WSTRB;
<a name="21"><q-n>     21  </q-n></a>   <q-m>// rand   bit         WLAST;</q-m>
<a name="22"><q-n>     22  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         WVALID;
<a name="23"><q-n>     23  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         WREADY;
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a>   <q-m>// Write response channel signals</q-m>
<a name="26"><q-n>     26  </q-n></a>   <q-m>// rand   bit [3:0]   BID;</q-m>
<a name="27"><q-n>     27  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w> [1:0]   BRESP;
<a name="28"><q-n>     28  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         BVALID;
<a name="29"><q-n>     29  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         BREADY;
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a>   <q-m>// Read address channel signals</q-m>
<a name="32"><q-n>     32  </q-n></a>   <q-m>// rand   bit [3:0]   ARID;</q-m>
<a name="33"><q-n>     33  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w> [31:0]  ARADDR;
<a name="34"><q-n>     34  </q-n></a>   <q-m>// rand   bit [3:0]   ARLEN;</q-m>
<a name="35"><q-n>     35  </q-n></a>   <q-m>// rand   bit [2:0]   ARSIZE;</q-m>
<a name="36"><q-n>     36  </q-n></a>   <q-m>// rand   bit [1:0]   ARBURST;</q-m>
<a name="37"><q-n>     37  </q-n></a>   <q-m>// rand   bit [1:0]   ARLOCK;</q-m>
<a name="38"><q-n>     38  </q-n></a>   <q-m>// rand   bit [3:0]   ARCACHE; </q-m>
<a name="39"><q-n>     39  </q-n></a>   <q-m>// rand   bit [2:0]   ARPROT;</q-m>
<a name="40"><q-n>     40  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         ARVALID;
<a name="41"><q-n>     41  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         ARREADY;
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>   <q-m>// Read data channel signals</q-m>
<a name="44"><q-n>     44  </q-n></a>   <q-m>// rand   bit [3:0]   RID;</q-m>
<a name="45"><q-n>     45  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w> [31:0]  RDATA;
<a name="46"><q-n>     46  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w> [1:0]   RRESP;
<a name="47"><q-n>     47  </q-n></a>   <q-m>// rand   bit         RLAST;</q-m>
<a name="48"><q-n>     48  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         RVALID;
<a name="49"><q-n>     49  </q-n></a>   <q-w>rand</q-w>   <q-w>bit</q-w>         RREADY;
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>
<a name="52"><q-n>     52  </q-n></a>	
<a name="53"><q-n>     53  </q-n></a>	
<a name="54"><q-n>     54  </q-n></a>   `uvm_object_utils_begin(AXI_Packet)
<a name="55"><q-n>     55  </q-n></a>
<a name="56"><q-n>     56  </q-n></a>      <q-m>// Read address channel signals</q-m>
<a name="57"><q-n>     57  </q-n></a>
<a name="58"><q-n>     58  </q-n></a>	   <q-m>// `uvm_field_int(ARID, UVM_HEX)</q-m>
<a name="59"><q-n>     59  </q-n></a>	   `uvm_field_int(ARADDR, UVM_HEX)
<a name="60"><q-n>     60  </q-n></a>	   <q-m>// `uvm_field_int(ARLEN, UVM_HEX)</q-m>
<a name="61"><q-n>     61  </q-n></a>	   <q-m>// `uvm_field_int(ARSIZE, UVM_HEX)</q-m>
<a name="62"><q-n>     62  </q-n></a>     <q-m>// `uvm_field_int(ARBURST, UVM_HEX)</q-m>
<a name="63"><q-n>     63  </q-n></a>     <q-m>// `uvm_field_int(ARLOCK, UVM_HEX)</q-m>
<a name="64"><q-n>     64  </q-n></a>     <q-m>// `uvm_field_int(ARCACHE, UVM_HEX)</q-m>
<a name="65"><q-n>     65  </q-n></a>     <q-m>// `uvm_field_int(ARPROT, UVM_HEX)</q-m>
<a name="66"><q-n>     66  </q-n></a>     `uvm_field_int(ARVALID, UVM_HEX)
<a name="67"><q-n>     67  </q-n></a>     `uvm_field_int(ARREADY, UVM_HEX)
<a name="68"><q-n>     68  </q-n></a>
<a name="69"><q-n>     69  </q-n></a>   <q-m>// Write address channel signals</q-m>
<a name="70"><q-n>     70  </q-n></a>
<a name="71"><q-n>     71  </q-n></a>     <q-m>// `uvm_field_int(AWID, UVM_HEX)</q-m>
<a name="72"><q-n>     72  </q-n></a>     `uvm_field_int(AWADDR, UVM_HEX)
<a name="73"><q-n>     73  </q-n></a>     <q-m>// `uvm_field_int(AWLEN, UVM_HEX)</q-m>
<a name="74"><q-n>     74  </q-n></a>     <q-m>// `uvm_field_int(AWSIZE, UVM_HEX)</q-m>
<a name="75"><q-n>     75  </q-n></a>     <q-m>// `uvm_field_int(AWBURST, UVM_HEX)</q-m>
<a name="76"><q-n>     76  </q-n></a>     <q-m>// `uvm_field_int(AWLOCK, UVM_HEX)</q-m>
<a name="77"><q-n>     77  </q-n></a>     <q-m>// `uvm_field_int(AWCACHE, UVM_HEX)</q-m>
<a name="78"><q-n>     78  </q-n></a>     <q-m>// `uvm_field_int(AWPROT, UVM_HEX)</q-m>
<a name="79"><q-n>     79  </q-n></a>     `uvm_field_int(AWVALID, UVM_HEX)
<a name="80"><q-n>     80  </q-n></a>     `uvm_field_int(AWREADY, UVM_HEX)
<a name="81"><q-n>     81  </q-n></a>
<a name="82"><q-n>     82  </q-n></a>   <q-m>// Read data channel signals</q-m>
<a name="83"><q-n>     83  </q-n></a>
<a name="84"><q-n>     84  </q-n></a>     <q-m>// `uvm_field_int(RID, UVM_HEX)</q-m>
<a name="85"><q-n>     85  </q-n></a>     `uvm_field_int(RDATA, UVM_HEX)
<a name="86"><q-n>     86  </q-n></a>     `uvm_field_int(RRESP, UVM_HEX)
<a name="87"><q-n>     87  </q-n></a>     <q-m>// `uvm_field_int(RLAST, UVM_HEX)</q-m>
<a name="88"><q-n>     88  </q-n></a>     `uvm_field_int(RVALID, UVM_HEX)
<a name="89"><q-n>     89  </q-n></a>     `uvm_field_int(RREADY, UVM_HEX)
<a name="90"><q-n>     90  </q-n></a>
<a name="91"><q-n>     91  </q-n></a>   <q-m>// Write data channel signals</q-m>
<a name="92"><q-n>     92  </q-n></a>
<a name="93"><q-n>     93  </q-n></a>     <q-m>// `uvm_field_int(WID, UVM_HEX)</q-m>
<a name="94"><q-n>     94  </q-n></a>     `uvm_field_int(WDATA, UVM_HEX)
<a name="95"><q-n>     95  </q-n></a>     `uvm_field_int(WSTRB, UVM_HEX)
<a name="96"><q-n>     96  </q-n></a>     <q-m>// `uvm_field_int(WLAST, UVM_HEX)</q-m>
<a name="97"><q-n>     97  </q-n></a>     `uvm_field_int(WVALID, UVM_HEX)
<a name="98"><q-n>     98  </q-n></a>     `uvm_field_int(WREADY, UVM_HEX)
<a name="99"><q-n>     99  </q-n></a>
<a name="100"><q-n>     100  </q-n></a>   <q-m>// Write response channel signals</q-m>
<a name="101"><q-n>     101  </q-n></a>
<a name="102"><q-n>     102  </q-n></a>     <q-m>// `uvm_field_int(BID, UVM_HEX)</q-m>
<a name="103"><q-n>     103  </q-n></a>     `uvm_field_int(BRESP, UVM_HEX)
<a name="104"><q-n>     104  </q-n></a>     `uvm_field_int(BVALID, UVM_HEX)
<a name="105"><q-n>     105  </q-n></a>     `uvm_field_int(BREADY, UVM_HEX)
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a>	 `uvm_object_utils_end
<a name="108"><q-n>     108  </q-n></a>	
<a name="109"><q-n>     109  </q-n></a><q-w>endclass</q-w> : AXI_Packet</pre>
</tt>

  
</body>
</html>
