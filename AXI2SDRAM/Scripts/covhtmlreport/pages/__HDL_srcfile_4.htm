
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>   <q-w>module</q-w> AXIL_Slave_FSM #(
<a name="2"><q-n>     2  </q-n></a>                                <q-w>parameter</q-w>   ADDR_WIDTH = 32,
<a name="3"><q-n>     3  </q-n></a>                                            DATA_WIDTH = 32
<a name="4"><q-n>     4  </q-n></a>                          )   
<a name="5"><q-n>     5  </q-n></a>        (
<a name="6"><q-n>     6  </q-n></a>            <q-w>input</q-w> s_axil_clk,
<a name="7"><q-n>     7  </q-n></a>            <q-w>input</q-w> s_axil_resetn,
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a>            <q-m>//Write address channel signals</q-m>
<a name="10"><q-n>     10  </q-n></a>            <q-w>input</q-w>   <q-w>wire</q-w>    [ADDR_WIDTH-1:0]     s_axil_awaddr,
<a name="11"><q-n>     11  </q-n></a>            <q-w>input</q-w>   <q-w>wire</q-w>                         s_axil_awvalid,
<a name="12"><q-n>     12  </q-n></a>            <q-w>output</q-w>  <q-w>reg</q-w>                          s_axil_awready,  
<a name="13"><q-n>     13  </q-n></a>
<a name="14"><q-n>     14  </q-n></a>            <q-m>//write data channel signals </q-m>
<a name="15"><q-n>     15  </q-n></a>            <q-w>input</q-w>   <q-w>wire</q-w>    [DATA_WIDTH-1:0]     s_axil_wdata,
<a name="16"><q-n>     16  </q-n></a>            <q-w>input</q-w>   <q-w>wire</q-w>                         s_axil_wvalid,
<a name="17"><q-n>     17  </q-n></a>            <q-w>input</q-w>   <q-w>wire</q-w>    [DATA_WIDTH/8-1:0]   s_axil_wstrb,
<a name="18"><q-n>     18  </q-n></a>            <q-w>output</q-w>  <q-w>reg</q-w>                          s_axil_wready,
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a>            <q-m>//write response signals</q-m>
<a name="21"><q-n>     21  </q-n></a>            <q-w>input</q-w>   <q-w>wire</q-w>                        s_axil_bready,
<a name="22"><q-n>     22  </q-n></a>            <q-w>output</q-w>  <q-w>reg</q-w>     [1:0]               s_axil_bresp ,
<a name="23"><q-n>     23  </q-n></a>            <q-w>output</q-w>  <q-w>reg</q-w>                         s_axil_bvalid,
<a name="24"><q-n>     24  </q-n></a>            
<a name="25"><q-n>     25  </q-n></a>            <q-m>//Read address channel signals</q-m>
<a name="26"><q-n>     26  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>     [ADDR_WIDTH-1:0]    s_axil_araddr,
<a name="27"><q-n>     27  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         s_axil_arvalid,
<a name="28"><q-n>     28  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>                          s_axil_arready,
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a>            <q-m>//Read data channel signals</q-m>
<a name="31"><q-n>     31  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>      [DATA_WIDTH-1:0]    s_axil_rdata,
<a name="32"><q-n>     32  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>      [1:0]               s_axil_rresp,
<a name="33"><q-n>     33  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>                          s_axil_rvalid,
<a name="34"><q-n>     34  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         s_axil_rready,              
<a name="35"><q-n>     35  </q-n></a>        
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>                          AXIL_WR_ADDR_EN,    
<a name="38"><q-n>     38  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>                          AXIL_WR_DATA_EN,
<a name="39"><q-n>     39  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>                          AXIL_RD_ADDR_EN,    
<a name="40"><q-n>     40  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>                          AXIL_RD_DATA_EN,
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>      [ADDR_WIDTH-1:0]    AXIL_WR_ADDR_IN,    
<a name="43"><q-n>     43  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>      [DATA_WIDTH-1:0]    AXIL_WR_DATA_IN,  
<a name="44"><q-n>     44  </q-n></a>            <q-w>output</q-w> <q-w>reg</q-w>      [ADDR_WIDTH-1:0]    AXIL_RD_ADDR_IN, 
<a name="45"><q-n>     45  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>     [DATA_WIDTH-1:0]    AXIL_RD_DATA_OUT,
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         WADDR_FIFO_FULL,
<a name="49"><q-n>     49  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         WADDR_FIFO_EMPTY,
<a name="50"><q-n>     50  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         WDATA_FIFO_FULL,
<a name="51"><q-n>     51  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         WDATA_FIFO_EMPTY,
<a name="52"><q-n>     52  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         RADDR_FIFO_FULL,
<a name="53"><q-n>     53  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         RADDR_FIFO_EMPTY,
<a name="54"><q-n>     54  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         RDATA_FIFO_FULL,
<a name="55"><q-n>     55  </q-n></a>            <q-w>input</q-w>  <q-w>wire</q-w>                         RDATA_FIFO_EMPTY
<a name="56"><q-n>     56  </q-n></a>
<a name="57"><q-n>     57  </q-n></a>        );
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a>        <q-m>//Registered outputs for write signals</q-m>
<a name="61"><q-n>     61  </q-n></a>        <q-w>reg</q-w> [ADDR_WIDTH-1:0]    reg_awaddr;
<a name="62"><q-n>     62  </q-n></a>        <q-w>reg</q-w>                     reg_awready;     
<a name="63"><q-n>     63  </q-n></a>        <q-w>reg</q-w> [DATA_WIDTH-1:0]    reg_wdata;
<a name="64"><q-n>     64  </q-n></a>        <q-w>reg</q-w>                     reg_wready;
<a name="65"><q-n>     65  </q-n></a>        <q-w>reg</q-w>                     reg_bvalid;
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a>        <q-w>reg</q-w> [1:0] w_state;
<a name="68"><q-n>     68  </q-n></a>  
<a name="69"><q-n>     69  </q-n></a>        <q-w>assign</q-w> s_axil_awready= reg_awready;
<a name="70"><q-n>     70  </q-n></a>        <q-w>assign</q-w> s_axil_wready = reg_wready ;
<a name="71"><q-n>     71  </q-n></a>        <q-w>assign</q-w> s_axil_bvalid = reg_bvalid ;  
<a name="72"><q-n>     72  </q-n></a>        <q-w>assign</q-w> s_axil_bresp  = 2'b00;       <q-m>//OKAY</q-m>
<a name="73"><q-n>     73  </q-n></a>
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a>
<a name="76"><q-n>     76  </q-n></a>        <q-m>//Registered outputs for Read signals</q-m>
<a name="77"><q-n>     77  </q-n></a>        <q-w>reg</q-w> [ADDR_WIDTH-1:0]    reg_araddr;
<a name="78"><q-n>     78  </q-n></a>        <q-w>reg</q-w> [DATA_WIDTH-1:0]    reg_rdata;
<a name="79"><q-n>     79  </q-n></a>        <q-w>reg</q-w>                     reg_rvalid;
<a name="80"><q-n>     80  </q-n></a>        <q-w>reg</q-w>                     reg_arready;
<a name="81"><q-n>     81  </q-n></a>        
<a name="82"><q-n>     82  </q-n></a>        <q-w>reg</q-w> [1:0] r_state;
<a name="83"><q-n>     83  </q-n></a>
<a name="84"><q-n>     84  </q-n></a>        <q-w>assign</q-w> s_axil_arready= reg_arready;
<a name="85"><q-n>     85  </q-n></a>        <q-w>assign</q-w> s_axil_rvalid = reg_rvalid;
<a name="86"><q-n>     86  </q-n></a>        <q-w>assign</q-w> s_axil_rdata  = reg_rdata ;
<a name="87"><q-n>     87  </q-n></a>        <q-w>assign</q-w> s_axil_rresp  = 'h0; <q-m>// OKAY              </q-m>
<a name="88"><q-n>     88  </q-n></a>     
<a name="89"><q-n>     89  </q-n></a>    <q-m>//  Slave Memory </q-m>
<a name="90"><q-n>     90  </q-n></a>  <q-m>//      reg [$clog2(ADDR_WIDTH)-1 : 0] [DATA_WIDTH-1 : 0] mem ;</q-m>
<a name="91"><q-n>     91  </q-n></a>  
<a name="92"><q-n>     92  </q-n></a>        <q-w>always_ff</q-w> @(<q-a>posedge</q-w> s_axil_clk) <q-w>begin</q-w>
<a name="93"><q-n>     93  </q-n></a>            <q-w>if</q-w>(s_axil_resetn) <q-w>begin</q-w>
<a name="94"><q-n>     94  </q-n></a>                w_state     &lt;= 2'b00;          <q-m>//IDLE STATE</q-m>
<a name="95"><q-n>     95  </q-n></a>                reg_awaddr  &lt;= 'h0;
<a name="96"><q-n>     96  </q-n></a>                reg_awready &lt;= 1'b0;
<a name="97"><q-n>     97  </q-n></a>                reg_wdata   &lt;=  'h0;
<a name="98"><q-n>     98  </q-n></a>                reg_wready  &lt;= 1'b0;
<a name="99"><q-n>     99  </q-n></a>                reg_bvalid  &lt;= 1'b0;
<a name="100"><q-n>     100  </q-n></a>
<a name="101"><q-n>     101  </q-n></a>                AXIL_WR_ADDR_IN &lt;= 'h0;
<a name="102"><q-n>     102  </q-n></a>                AXIL_WR_ADDR_EN &lt;= 1'b0;
<a name="103"><q-n>     103  </q-n></a>                AXIL_WR_DATA_IN &lt;= 'h0;
<a name="104"><q-n>     104  </q-n></a>                AXIL_WR_DATA_EN &lt;= 1'b0;
<a name="105"><q-n>     105  </q-n></a>
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a>            <q-w>end</q-w> <q-w>else</q-w> <q-w>begin</q-w>
<a name="108"><q-n>     108  </q-n></a>                <q-w>case</q-w> (w_state)
<a name="109"><q-n>     109  </q-n></a>                    2'b00:  <q-w>begin</q-w>   <q-m>//IDLE</q-m>
<a name="110"><q-n>     110  </q-n></a>                            reg_awready &lt;= 1'b1;                <q-m>// we are asserting awready before awvalid to ensure its active system</q-m>
<a name="111"><q-n>     111  </q-n></a>                            
<a name="112"><q-n>     112  </q-n></a>                            <q-w>if</q-w>(s_axil_awvalid &amp; s_axil_awready) <q-w>begin</q-w>           <q-m>//HANDSHAKE </q-m>
<a name="113"><q-n>     113  </q-n></a>                                reg_awaddr  &lt;= s_axil_awaddr;
<a name="114"><q-n>     114  </q-n></a>                                
<a name="115"><q-n>     115  </q-n></a>                                <q-w>if</q-w>(~WADDR_FIFO_FULL) <q-w>begin</q-w>
<a name="116"><q-n>     116  </q-n></a>                                    AXIL_WR_ADDR_EN  &lt;= 1'b1;
<a name="117"><q-n>     117  </q-n></a>                                    AXIL_WR_ADDR_IN  &lt;= reg_awaddr ;                 <q-m>//register the write_address</q-m>
<a name="118"><q-n>     118  </q-n></a>                                    reg_awready &lt;=  1'b0;                           <q-m>//make aw_ready back to zero</q-m>
<a name="119"><q-n>     119  </q-n></a>                                    w_state     &lt;=  2'b01;    <q-m>//DATA STATE          //move to Data State                  </q-m>
<a name="120"><q-n>     120  </q-n></a>                                    reg_wready  &lt;= 1'b1;
<a name="121"><q-n>     121  </q-n></a>                                <q-w>end</q-w>
<a name="122"><q-n>     122  </q-n></a>                                <q-w>else</q-w> <q-w>begin</q-w>
<a name="123"><q-n>     123  </q-n></a>                                    AXIL_WR_ADDR_EN  &lt;= 1'b0;
<a name="124"><q-n>     124  </q-n></a>                                <q-w>end</q-w>
<a name="125"><q-n>     125  </q-n></a>                            <q-w>end</q-w>
<a name="126"><q-n>     126  </q-n></a>                            <q-w>else</q-w> <q-w>begin</q-w>
<a name="127"><q-n>     127  </q-n></a>                                reg_awaddr      &lt;= reg_awaddr ;
<a name="128"><q-n>     128  </q-n></a>                                AXIL_WR_ADDR_EN &lt;= 1'b0;
<a name="129"><q-n>     129  </q-n></a>                                AXIL_WR_ADDR_IN &lt;= AXIL_WR_ADDR_IN ;
<a name="130"><q-n>     130  </q-n></a>                                w_state  &lt;= 2'b00;
<a name="131"><q-n>     131  </q-n></a>                            <q-w>end</q-w>  
<a name="132"><q-n>     132  </q-n></a>                    <q-w>end</q-w>
<a name="133"><q-n>     133  </q-n></a>
<a name="134"><q-n>     134  </q-n></a>                    2'b01:  <q-w>begin</q-w>   <q-m>//DATA</q-m>
<a name="135"><q-n>     135  </q-n></a>                        <q-m>//  reg_wready  &lt;= 1'b1;   // we are asserting wready before awvalid to ensure its active system</q-m>
<a name="136"><q-n>     136  </q-n></a>                            AXIL_WR_ADDR_EN &lt;= 1'b0;
<a name="137"><q-n>     137  </q-n></a>                            <q-w>if</q-w>(s_axil_wvalid &amp; s_axil_wready) <q-w>begin</q-w>             <q-m>//HANDSHAKE</q-m>
<a name="138"><q-n>     138  </q-n></a>                        <q-m>//      reg_wdata  &lt;= s_axil_wdata;</q-m>
<a name="139"><q-n>     139  </q-n></a>                                <q-w>if</q-w>(~WDATA_FIFO_FULL) <q-w>begin</q-w>
<a name="140"><q-n>     140  </q-n></a>                                    AXIL_WR_DATA_EN &lt;= 1'b1;
<a name="141"><q-n>     141  </q-n></a>
<a name="142"><q-n>     142  </q-n></a>                                    <q-w>for</q-w> (<q-w>int</q-w> i = 0; i &lt; 4; i++) <q-w>begin</q-w>
<a name="143"><q-n>     143  </q-n></a>                                        <q-w>if</q-w>(s_axil_wstrb[i]) <q-w>begin</q-w>
<a name="144"><q-n>     144  </q-n></a>                                            AXIL_WR_DATA_IN [(i * 8) +: 8] &lt;=    s_axil_wdata[(i * 8) +: 8];
<a name="145"><q-n>     145  </q-n></a>                                            <q-m>//  mem[reg_awaddr-1][(i * 8) +: 8] &lt;= reg_wdata[(i * 8) +: 8];       //writing into the memory</q-m>
<a name="146"><q-n>     146  </q-n></a>                                        <q-w>end</q-w>
<a name="147"><q-n>     147  </q-n></a>                                    <q-w>end</q-w>
<a name="148"><q-n>     148  </q-n></a>                                
<a name="149"><q-n>     149  </q-n></a>                                    reg_wready      &lt;= 1'b0;                        <q-m>//deasserting back wready</q-m>
<a name="150"><q-n>     150  </q-n></a>                                    
<a name="151"><q-n>     151  </q-n></a>                                    <q-w>if</q-w>(s_axil_bready) <q-w>begin</q-w>
<a name="152"><q-n>     152  </q-n></a>                                        reg_bvalid  &lt;= 1'b1;
<a name="153"><q-n>     153  </q-n></a>                                        w_state     &lt;= 2'b11;    <q-m>//Done State          </q-m>
<a name="154"><q-n>     154  </q-n></a>                                        AXIL_WR_DATA_EN &lt;= 1'b0;
<a name="155"><q-n>     155  </q-n></a>                                    <q-w>end</q-w>
<a name="156"><q-n>     156  </q-n></a>                                    <q-w>else</q-w> <q-w>begin</q-w>
<a name="157"><q-n>     157  </q-n></a>                                        w_state         &lt;= 2'b10;                       <q-m>//RESPONSE STATE    </q-m>
<a name="158"><q-n>     158  </q-n></a>                                    <q-w>end</q-w>
<a name="159"><q-n>     159  </q-n></a>                                <q-w>end</q-w>
<a name="160"><q-n>     160  </q-n></a>                            <q-w>end</q-w>
<a name="161"><q-n>     161  </q-n></a>
<a name="162"><q-n>     162  </q-n></a>                            <q-w>else</q-w> <q-w>begin</q-w>
<a name="163"><q-n>     163  </q-n></a>                                w_state &lt;= 2'b01;
<a name="164"><q-n>     164  </q-n></a>                                AXIL_WR_DATA_EN &lt;= 1'b0;
<a name="165"><q-n>     165  </q-n></a>                            <q-w>end</q-w>                                                        
<a name="166"><q-n>     166  </q-n></a>                    <q-w>end</q-w>
<a name="167"><q-n>     167  </q-n></a>
<a name="168"><q-n>     168  </q-n></a>                    2'b10:  <q-w>begin</q-w>   <q-m>//RESPONSE</q-m>
<a name="169"><q-n>     169  </q-n></a>                            AXIL_WR_DATA_EN &lt;= 1'b0;
<a name="170"><q-n>     170  </q-n></a>                            <q-w>if</q-w>(s_axil_bready) <q-w>begin</q-w>
<a name="171"><q-n>     171  </q-n></a>                               reg_bvalid  &lt;= 1'b1;
<a name="172"><q-n>     172  </q-n></a>                               w_state     &lt;= 2'b11;    <q-m>//Done State          </q-m>
<a name="173"><q-n>     173  </q-n></a>                            <q-w>end</q-w>    
<a name="174"><q-n>     174  </q-n></a>                    <q-w>end</q-w>
<a name="175"><q-n>     175  </q-n></a>
<a name="176"><q-n>     176  </q-n></a>                    2'b11:  <q-w>begin</q-w>   <q-m>//DONE</q-m>
<a name="177"><q-n>     177  </q-n></a>                                reg_bvalid &lt;= 1'b0;
<a name="178"><q-n>     178  </q-n></a>                                w_state    &lt;= 2'b00;   <q-m>//IDLE STATE</q-m>
<a name="179"><q-n>     179  </q-n></a>                            <q-w>end</q-w>
<a name="180"><q-n>     180  </q-n></a>
<a name="181"><q-n>     181  </q-n></a>                    <q-w>default</q-w> : <q-m>/* default */</q-m>;
<a name="182"><q-n>     182  </q-n></a>                <q-w>endcase</q-w>
<a name="183"><q-n>     183  </q-n></a>            <q-w>end</q-w>
<a name="184"><q-n>     184  </q-n></a>        <q-w>end</q-w>
<a name="185"><q-n>     185  </q-n></a>
<a name="186"><q-n>     186  </q-n></a><q-m>//---------------------------------------READ TRANSACTION---------------------------------------------</q-m>
<a name="187"><q-n>     187  </q-n></a>
<a name="188"><q-n>     188  </q-n></a>        <q-w>always_ff</q-w> @(<q-a>posedge</q-w> s_axil_clk) <q-w>begin</q-w>
<a name="189"><q-n>     189  </q-n></a>            <q-w>if</q-w>(s_axil_resetn) <q-w>begin</q-w>
<a name="190"><q-n>     190  </q-n></a>                r_state     &lt;= 2'b00; <q-m>// IDLE</q-m>
<a name="191"><q-n>     191  </q-n></a>                reg_arready &lt;= 1'b0;
<a name="192"><q-n>     192  </q-n></a>                reg_araddr  &lt;= 'h0;
<a name="193"><q-n>     193  </q-n></a>                reg_rdata   &lt;= 'h0;
<a name="194"><q-n>     194  </q-n></a>                reg_rvalid  &lt;= 1'b0;
<a name="195"><q-n>     195  </q-n></a>
<a name="196"><q-n>     196  </q-n></a>                AXIL_RD_ADDR_EN &lt;= 1'b0;
<a name="197"><q-n>     197  </q-n></a>                AXIL_RD_DATA_EN &lt;= 1'b0;
<a name="198"><q-n>     198  </q-n></a>                AXIL_RD_ADDR_IN &lt;= 'h0;
<a name="199"><q-n>     199  </q-n></a>
<a name="200"><q-n>     200  </q-n></a>            
<a name="201"><q-n>     201  </q-n></a>            <q-w>end</q-w> <q-w>else</q-w> <q-w>begin</q-w>
<a name="202"><q-n>     202  </q-n></a>                <q-w>case</q-w> (r_state)
<a name="203"><q-n>     203  </q-n></a>                    2'b00: <q-w>begin</q-w> <q-m>// IDLE</q-m>
<a name="204"><q-n>     204  </q-n></a>                            reg_arready &lt;= 1'b1;
<a name="205"><q-n>     205  </q-n></a>                            <q-w>if</q-w> (s_axil_arvalid &amp; reg_arready) <q-w>begin</q-w>
<a name="206"><q-n>     206  </q-n></a>                                reg_araddr &lt;= s_axil_araddr;
<a name="207"><q-n>     207  </q-n></a>                                <q-w>if</q-w>(~RADDR_FIFO_FULL) <q-w>begin</q-w>
<a name="208"><q-n>     208  </q-n></a>                                    AXIL_RD_ADDR_EN &lt;= 1'b1;
<a name="209"><q-n>     209  </q-n></a>                                    AXIL_RD_ADDR_IN &lt;= reg_araddr;
<a name="210"><q-n>     210  </q-n></a>
<a name="211"><q-n>     211  </q-n></a>                                    reg_arready &lt;= 1'b0;
<a name="212"><q-n>     212  </q-n></a>                                    r_state &lt;= 2'b01; <q-m>// RD_DATA</q-m>
<a name="213"><q-n>     213  </q-n></a>                                <q-w>end</q-w>
<a name="214"><q-n>     214  </q-n></a>                                <q-w>else</q-w> <q-w>begin</q-w>
<a name="215"><q-n>     215  </q-n></a>                                    AXIL_RD_ADDR_EN &lt;= 1'b0;  
<a name="216"><q-n>     216  </q-n></a>                                <q-w>end</q-w>
<a name="217"><q-n>     217  </q-n></a>
<a name="218"><q-n>     218  </q-n></a>                        <q-w>end</q-w>
<a name="219"><q-n>     219  </q-n></a>                        <q-w>else</q-w> <q-w>begin</q-w>
<a name="220"><q-n>     220  </q-n></a>                            AXIL_RD_ADDR_EN &lt;= 1'b0;
<a name="221"><q-n>     221  </q-n></a>                        <q-w>end</q-w>
<a name="222"><q-n>     222  </q-n></a>                    <q-w>end</q-w>
<a name="223"><q-n>     223  </q-n></a>                    
<a name="224"><q-n>     224  </q-n></a>                    2'b01: <q-w>begin</q-w> <q-m>// RD_DATA</q-m>
<a name="225"><q-n>     225  </q-n></a>                        <q-w>if</q-w> (s_axil_rready) <q-w>begin</q-w>
<a name="226"><q-n>     226  </q-n></a>                            <q-w>if</q-w>(~RDATA_FIFO_EMPTY) <q-w>begin</q-w>
<a name="227"><q-n>     227  </q-n></a>                                AXIL_RD_DATA_EN &lt;= 1'b1;
<a name="228"><q-n>     228  </q-n></a>                                reg_rdata &lt;= AXIL_RD_DATA_OUT;
<a name="229"><q-n>     229  </q-n></a>                                reg_rvalid &lt;= 1'b1;
<a name="230"><q-n>     230  </q-n></a>                                r_state &lt;= 2'b10; <q-m>// RD_RESP</q-m>
<a name="231"><q-n>     231  </q-n></a>                            <q-w>end</q-w>
<a name="232"><q-n>     232  </q-n></a>                        <q-w>end</q-w>
<a name="233"><q-n>     233  </q-n></a>                    <q-w>end</q-w>
<a name="234"><q-n>     234  </q-n></a>                    
<a name="235"><q-n>     235  </q-n></a>                    2'b10: <q-w>begin</q-w> <q-m>// RD_RESP</q-m>
<a name="236"><q-n>     236  </q-n></a>                            AXIL_RD_DATA_EN &lt;= 1'b0;
<a name="237"><q-n>     237  </q-n></a>                            reg_rvalid &lt;= 1'b0;
<a name="238"><q-n>     238  </q-n></a>                            r_state &lt;= 2'b00; <q-m>// IDLE</q-m>
<a name="239"><q-n>     239  </q-n></a>                    <q-w>end</q-w>
<a name="240"><q-n>     240  </q-n></a>
<a name="241"><q-n>     241  </q-n></a>                    <q-w>default</q-w> : <q-m>/* default */</q-m>;
<a name="242"><q-n>     242  </q-n></a>                <q-w>endcase</q-w>
<a name="243"><q-n>     243  </q-n></a>            <q-w>end</q-w>
<a name="244"><q-n>     244  </q-n></a>        <q-w>end</q-w>
<a name="245"><q-n>     245  </q-n></a>
<a name="246"><q-n>     246  </q-n></a><q-m>//------------------------------------------------------------------------------------------------------</q-m>
<a name="247"><q-n>     247  </q-n></a>
<a name="248"><q-n>     248  </q-n></a>
<a name="249"><q-n>     249  </q-n></a><q-w>endmodule</q-w> : AXIL_Slave_FSM</pre>
</tt>

  
</body>
</html>
