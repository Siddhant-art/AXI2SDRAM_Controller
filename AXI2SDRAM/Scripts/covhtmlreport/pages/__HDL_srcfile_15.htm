
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>class</q-w> AXI_Monitor <q-w>extends</q-w> uvm_monitor;
<a name="2"><q-n>     2  </q-n></a>
<a name="3"><q-n>     3  </q-n></a>	`uvm_component_utils(AXI_Monitor)
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a>    <q-w>virtual</q-w> AXI_Interface axi_intf;
<a name="6"><q-n>     6  </q-n></a>
<a name="7"><q-n>     7  </q-n></a>    AXI_Packet axi_pkt;
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a>    uvm_analysis_port #(AXI_Packet) item_collected_port;
<a name="10"><q-n>     10  </q-n></a>
<a name="11"><q-n>     11  </q-n></a>	<q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name, uvm_component parent);
<a name="12"><q-n>     12  </q-n></a>		<q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="13"><q-n>     13  </q-n></a>		item_collected_port = <q-w>new</q-w>(<q-l>"item_collected_port"</q-l>, <q-w>this</q-w>);
<a name="14"><q-n>     14  </q-n></a>	<q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>	<q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="17"><q-n>     17  </q-n></a>		<q-w>super</q-w>.build_phase(phase);
<a name="18"><q-n>     18  </q-n></a>		axi_pkt=<q-w>new</q-w>();
<a name="19"><q-n>     19  </q-n></a>		`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Monitor_build-------------------------------"</q-l>,UVM_NONE)
<a name="20"><q-n>     20  </q-n></a>		<q-w>if</q-w>(!uvm_config_db#(<q-w>virtual</q-w> AXI_Interface)::get(<q-w>this</q-w>, <q-l>""</q-l>, <q-l>"a_vif"</q-l>, axi_intf))
<a name="21"><q-n>     21  </q-n></a>       		`uvm_fatal(<q-l>"NO_VIF"</q-l>,{<q-l>"virtual interface must be set for: "</q-l>,get_full_name(),<q-l>".a_vif"</q-l>});
<a name="22"><q-n>     22  </q-n></a>	<q-w>endfunction</q-w> : build_phase
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="25"><q-n>     25  </q-n></a>    <q-w>forever</q-w> <q-w>begin</q-w>
<a name="26"><q-n>     26  </q-n></a>    		capture_axi_write();
<a name="27"><q-n>     27  </q-n></a>      		capture_axi_read();
<a name="28"><q-n>     28  </q-n></a>      		`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Monitor_data-------------------------------"</q-l>,UVM_NONE)
<a name="29"><q-n>     29  </q-n></a>        	<q-m>// axi_pkt.print();</q-m>
<a name="30"><q-n>     30  </q-n></a>	  		item_collected_port.write(axi_pkt);
<a name="31"><q-n>     31  </q-n></a>      	<q-w>end</q-w> 
<a name="32"><q-n>     32  </q-n></a>  <q-w>endtask</q-w> : run_phase
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>
<a name="35"><q-n>     35  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> capture_axi_write();
<a name="36"><q-n>     36  </q-n></a>      	@(<q-a>posedge</q-w> axi_intf.ACLK);
<a name="37"><q-n>     37  </q-n></a>    
<a name="38"><q-n>     38  </q-n></a>		   <q-m>// Write address channel signals</q-m>
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a>		    <q-m>// Signal from TB to DUT</q-m>
<a name="41"><q-n>     41  </q-n></a>		   <q-m>// axi_pkt.AWID    = axi_intf.AWID;            //signal for AXI4_lite</q-m>
<a name="42"><q-n>     42  </q-n></a>		   axi_pkt.AWADDR  = axi_intf.AWADDR;
<a name="43"><q-n>     43  </q-n></a>		   <q-m>// axi_pkt.AWLEN   = axi_intf.AWLEN;</q-m>
<a name="44"><q-n>     44  </q-n></a>		   <q-m>// axi_pkt.AWSIZE  = axi_intf.AWSIZE;</q-m>
<a name="45"><q-n>     45  </q-n></a>		   <q-m>// axi_pkt.AWBURST = axi_intf.AWBURST;</q-m>
<a name="46"><q-n>     46  </q-n></a>		   <q-m>// axi_pkt.AWLOCK  = axi_intf.AWLOCK;</q-m>
<a name="47"><q-n>     47  </q-n></a>		   <q-m>// axi_pkt.AWCACHE = axi_intf.AWCACHE;  </q-m>
<a name="48"><q-n>     48  </q-n></a>		   <q-m>// axi_pkt.AWPROT  = axi_intf.AWPROT;</q-m>
<a name="49"><q-n>     49  </q-n></a>		   axi_pkt.AWVALID = axi_intf.AWVALID;
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>		   <q-m>// Signal from DUT to TB</q-m>
<a name="52"><q-n>     52  </q-n></a>		   axi_pkt.AWREADY  = axi_intf.AWREADY;
<a name="53"><q-n>     53  </q-n></a>
<a name="54"><q-n>     54  </q-n></a>		   <q-m>// Write data channel signals</q-m>
<a name="55"><q-n>     55  </q-n></a>
<a name="56"><q-n>     56  </q-n></a>		    <q-m>// Signal from TB to DUT</q-m>
<a name="57"><q-n>     57  </q-n></a>		   <q-m>// axi_pkt.WID     = axi_intf.WID;</q-m>
<a name="58"><q-n>     58  </q-n></a>		   axi_pkt.WDATA   = axi_intf.WDATA;
<a name="59"><q-n>     59  </q-n></a>		   axi_pkt.WSTRB   = axi_intf.WSTRB;
<a name="60"><q-n>     60  </q-n></a>		   <q-m>// axi_pkt.WLAST   = axi_intf.WLAST;</q-m>
<a name="61"><q-n>     61  </q-n></a>		   axi_pkt.WVALID  = axi_intf.WVALID;
<a name="62"><q-n>     62  </q-n></a>
<a name="63"><q-n>     63  </q-n></a>		    <q-m>// Signal from DUT to TB</q-m>
<a name="64"><q-n>     64  </q-n></a>		   axi_pkt.WREADY   = axi_intf.WREADY;
<a name="65"><q-n>     65  </q-n></a>
<a name="66"><q-n>     66  </q-n></a>		   <q-m>// Write response channel signals</q-m>
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a>		    <q-m>// Signal from DUT to TB</q-m>
<a name="69"><q-n>     69  </q-n></a>		   <q-m>// axi_pkt.BID     =  axi_intf.BID;</q-m>
<a name="70"><q-n>     70  </q-n></a>		   axi_pkt.BRESP   =  axi_intf.BRESP;   
<a name="71"><q-n>     71  </q-n></a>		   axi_pkt.BVALID  =  axi_intf.BVALID;
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a>	        <q-m>// Signal from TB to DUT</q-m>
<a name="74"><q-n>     74  </q-n></a>		   axi_pkt.BREADY =  axi_intf.BREADY;
<a name="75"><q-n>     75  </q-n></a>        
<a name="76"><q-n>     76  </q-n></a>      	<q-m>// `uvm_info(get_full_name(),"-------------------------Packet_write_sampled-------------------------------",UVM_NONE)</q-m>
<a name="77"><q-n>     77  </q-n></a>    <q-w>endtask</q-w>
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> capture_axi_read();
<a name="80"><q-n>     80  </q-n></a>      	@(<q-a>posedge</q-w> axi_intf.ACLK);
<a name="81"><q-n>     81  </q-n></a>      	 <q-m>// Signal from TB to DUT</q-m>
<a name="82"><q-n>     82  </q-n></a>	   <q-m>// axi_pkt.ARID    = axi_intf.ARID;</q-m>
<a name="83"><q-n>     83  </q-n></a>	   axi_pkt.ARADDR  = axi_intf.ARADDR;
<a name="84"><q-n>     84  </q-n></a>	   <q-m>// axi_pkt.ARLEN   = axi_intf.ARLEN;</q-m>
<a name="85"><q-n>     85  </q-n></a>	   <q-m>// axi_pkt.ARSIZE  = axi_intf.ARSIZE;</q-m>
<a name="86"><q-n>     86  </q-n></a>	   <q-m>// axi_pkt.ARBURST = axi_intf.ARBURST;</q-m>
<a name="87"><q-n>     87  </q-n></a>	   <q-m>// axi_pkt.ARLOCK  = axi_intf.ARLOCK;</q-m>
<a name="88"><q-n>     88  </q-n></a>	   <q-m>// axi_pkt.ARCACHE = axi_intf.ARCACHE; </q-m>
<a name="89"><q-n>     89  </q-n></a>	   <q-m>// axi_pkt.ARPROT  = axi_intf.ARPROT;</q-m>
<a name="90"><q-n>     90  </q-n></a>	   axi_pkt.ARVALID = axi_intf.ARVALID;
<a name="91"><q-n>     91  </q-n></a>
<a name="92"><q-n>     92  </q-n></a>         <q-m>// Signal from DUT to TB</q-m>
<a name="93"><q-n>     93  </q-n></a>	   axi_pkt.ARREADY  =  axi_intf.ARREADY;
<a name="94"><q-n>     94  </q-n></a>
<a name="95"><q-n>     95  </q-n></a>	   <q-m>// Read data channel signals</q-m>
<a name="96"><q-n>     96  </q-n></a>
<a name="97"><q-n>     97  </q-n></a>	    <q-m>// Signal from DUT to TB</q-m>
<a name="98"><q-n>     98  </q-n></a>	   <q-m>// axi_pkt.RID      = axi_intf.RID ;</q-m>
<a name="99"><q-n>     99  </q-n></a>	   axi_pkt.RDATA    = axi_intf.RDATA ;
<a name="100"><q-n>     100  </q-n></a>	   axi_pkt.RRESP    = axi_intf.RRESP;
<a name="101"><q-n>     101  </q-n></a>	   <q-m>// axi_pkt.RLAST    = axi_intf.RLAST;</q-m>
<a name="102"><q-n>     102  </q-n></a>	   axi_pkt.RVALID   = axi_intf.RVALID ;
<a name="103"><q-n>     103  </q-n></a>
<a name="104"><q-n>     104  </q-n></a>         <q-m>// Signal from TB to DUT</q-m>
<a name="105"><q-n>     105  </q-n></a>	   axi_pkt.RREADY =  axi_intf.RREADY;
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a>      	<q-m>// `uvm_info(get_full_name(),"-------------------------Packet_Read_sampled-------------------------------",UVM_NONE)</q-m>
<a name="108"><q-n>     108  </q-n></a>    <q-w>endtask</q-w>
<a name="109"><q-n>     109  </q-n></a>
<a name="110"><q-n>     110  </q-n></a>
<a name="111"><q-n>     111  </q-n></a><q-w>endclass</q-w> : AXI_Monitor</pre>
</tt>

  
</body>
</html>
