
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>
<a name="2"><q-n>     2  </q-n></a>  <q-m>// Sequence for Reset Test Sequence</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//    class AXI_Reset_Test_Sequence extends AXI_base_Sequence;</q-m>
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a><q-m>// 	`uvm_object_utils(AXI_Reset_Test_Sequence)</q-m>
<a name="6"><q-n>     6  </q-n></a>
<a name="7"><q-n>     7  </q-n></a><q-m>// 	AXI_Packet trans;	</q-m>
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a><q-m>// 	//constructor</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>// 	function new(string name="AXI_Reset_Test_Sequence");</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>// 		super.new(name);</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m>// 		`uvm_info(get_full_name(),"-------------------------AXI_Sequence_build-------------------------------",UVM_NONE)</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m>// 	endfunction : new</q-m>
<a name="14"><q-n>     14  </q-n></a>
<a name="15"><q-n>     15  </q-n></a><q-m>// 	virtual task body();</q-m>
<a name="16"><q-n>     16  </q-n></a><q-m>// 		repeat(4)</q-m>
<a name="17"><q-n>     17  </q-n></a><q-m>// 		   begin</q-m>
<a name="18"><q-n>     18  </q-n></a><q-m>// 			`uvm_info(get_full_name(),"-------------------------AXI_Sequence_started-------------------------------",UVM_NONE)</q-m>
<a name="19"><q-n>     19  </q-n></a><q-m>// 			trans=AXI_Packet::type_id::create("trans");</q-m>
<a name="20"><q-n>     20  </q-n></a><q-m>// 			start_item(trans);</q-m>
<a name="21"><q-n>     21  </q-n></a><q-m>// 			// assert(trans.randomize());</q-m>
<a name="22"><q-n>     22  </q-n></a><q-m>// 			reset_test_sequence();</q-m>
<a name="23"><q-n>     23  </q-n></a><q-m>// 			// single_Read_sequence();</q-m>
<a name="24"><q-n>     24  </q-n></a><q-m>// 			`uvm_info(get_full_name(),"################################-AXI Generated Packet-############################",UVM_NONE)</q-m>
<a name="25"><q-n>     25  </q-n></a><q-m>// 			trans.print();</q-m>
<a name="26"><q-n>     26  </q-n></a><q-m>// 			finish_item(trans);</q-m>
<a name="27"><q-n>     27  </q-n></a><q-m>// 		end</q-m>
<a name="28"><q-n>     28  </q-n></a><q-m>// 	endtask : body</q-m>
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a><q-m>// 	virtual task reset_test_sequence();</q-m>
<a name="31"><q-n>     31  </q-n></a>
<a name="32"><q-n>     32  </q-n></a><q-m>// 		ARESETn = 'h0;</q-m>
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a><q-m>// 	endtask</q-m>
<a name="35"><q-n>     35  </q-n></a> 
<a name="36"><q-n>     36  </q-n></a><q-m>// endclass : AXI_Reset_Test_Sequence</q-m>
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a>  <q-m>// Sequence for Single Write Sequence</q-m>
<a name="40"><q-n>     40  </q-n></a><q-w>class</q-w> AXI_Single_Write_Sequence <q-w>extends</q-w> AXI_base_Sequence;
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>	`uvm_object_utils(AXI_Single_Write_Sequence)
<a name="43"><q-n>     43  </q-n></a>
<a name="44"><q-n>     44  </q-n></a>	AXI_Packet trans;	
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a>	<q-m>//constructor</q-m>
<a name="47"><q-n>     47  </q-n></a>	<q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"AXI_Single_Write_Sequence"</q-l>);
<a name="48"><q-n>     48  </q-n></a>		<q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="49"><q-n>     49  </q-n></a>		`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Sequence_build-------------------------------"</q-l>,UVM_NONE)
<a name="50"><q-n>     50  </q-n></a>	<q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="51"><q-n>     51  </q-n></a>
<a name="52"><q-n>     52  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="53"><q-n>     53  </q-n></a>		<q-w>repeat</q-w>(4)
<a name="54"><q-n>     54  </q-n></a>		   <q-w>begin</q-w>
<a name="55"><q-n>     55  </q-n></a>			`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Sequence_started-------------------------------"</q-l>,UVM_NONE)
<a name="56"><q-n>     56  </q-n></a>			trans=AXI_Packet::type_id::create(<q-l>"trans"</q-l>);
<a name="57"><q-n>     57  </q-n></a>			start_item(trans);
<a name="58"><q-n>     58  </q-n></a>			<q-m>// assert(trans.randomize());</q-m>
<a name="59"><q-n>     59  </q-n></a>			Single_Write_sequence();
<a name="60"><q-n>     60  </q-n></a>			<q-m>// single_Read_sequence();</q-m>
<a name="61"><q-n>     61  </q-n></a>			`uvm_info(get_full_name(),<q-l>"################################-AXI Generated Packet-############################"</q-l>,UVM_NONE)
<a name="62"><q-n>     62  </q-n></a>			trans.print();
<a name="63"><q-n>     63  </q-n></a>			finish_item(trans);
<a name="64"><q-n>     64  </q-n></a>		<q-w>end</q-w>
<a name="65"><q-n>     65  </q-n></a>	<q-w>endtask</q-w> : body
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> Single_Write_sequence();
<a name="68"><q-n>     68  </q-n></a>
<a name="69"><q-n>     69  </q-n></a>		trans.AWADDR = 'h001150aa;
<a name="70"><q-n>     70  </q-n></a>		trans.AWVALID = 'b1;
<a name="71"><q-n>     71  </q-n></a>
<a name="72"><q-n>     72  </q-n></a>		trans.WDATA = 'haa005511;
<a name="73"><q-n>     73  </q-n></a>		trans.WVALID = 'b1;
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a>	<q-w>endtask</q-w>
<a name="76"><q-n>     76  </q-n></a> 
<a name="77"><q-n>     77  </q-n></a><q-w>endclass</q-w> : AXI_Single_Write_Sequence
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>
<a name="80"><q-n>     80  </q-n></a>   <q-m>// Sequence for Read after Write Sequence</q-m>
<a name="81"><q-n>     81  </q-n></a><q-w>class</q-w> AXI_Single_Read_after_Write_Sequence <q-w>extends</q-w> AXI_base_Sequence;
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a>	`uvm_object_utils(AXI_Single_Read_after_Write_Sequence)
<a name="84"><q-n>     84  </q-n></a>
<a name="85"><q-n>     85  </q-n></a>	AXI_Packet trans;
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>	<q-w>integer</q-w> i=0 ;
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>	<q-m>//constructor</q-m>
<a name="90"><q-n>     90  </q-n></a>	<q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"AXI_Single_Read_after_Write_Sequence"</q-l>);
<a name="91"><q-n>     91  </q-n></a>		<q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="92"><q-n>     92  </q-n></a>		`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Sequence_build-------------------------------"</q-l>,UVM_NONE)
<a name="93"><q-n>     93  </q-n></a>	<q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="94"><q-n>     94  </q-n></a>
<a name="95"><q-n>     95  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="96"><q-n>     96  </q-n></a>		<q-w>repeat</q-w>(4)<q-w>begin</q-w>
<a name="97"><q-n>     97  </q-n></a>			`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Sequence_started-------------------------------"</q-l>,UVM_NONE)
<a name="98"><q-n>     98  </q-n></a>			trans=AXI_Packet::type_id::create(<q-l>"trans"</q-l>);
<a name="99"><q-n>     99  </q-n></a>			start_item(trans);
<a name="100"><q-n>     100  </q-n></a>			<q-m>// assert(trans.randomize());</q-m>
<a name="101"><q-n>     101  </q-n></a>			Single_Write_sequence();
<a name="102"><q-n>     102  </q-n></a>			single_Read_sequence();
<a name="103"><q-n>     103  </q-n></a>			`uvm_info(get_full_name(),<q-l>"################################-AXI Generated Packet-############################"</q-l>,UVM_NONE)
<a name="104"><q-n>     104  </q-n></a>			trans.print();
<a name="105"><q-n>     105  </q-n></a>			finish_item(trans);
<a name="106"><q-n>     106  </q-n></a>		<q-w>end</q-w>
<a name="107"><q-n>     107  </q-n></a>	<q-w>endtask</q-w> : body
<a name="108"><q-n>     108  </q-n></a>
<a name="109"><q-n>     109  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> Single_Write_sequence();
<a name="110"><q-n>     110  </q-n></a>
<a name="111"><q-n>     111  </q-n></a>		trans.AWADDR = 'h001150aa+i;
<a name="112"><q-n>     112  </q-n></a>		trans.AWVALID = 'b1;
<a name="113"><q-n>     113  </q-n></a>
<a name="114"><q-n>     114  </q-n></a>		trans.WDATA = 'haa005511;
<a name="115"><q-n>     115  </q-n></a>		trans.WVALID = 'b1;
<a name="116"><q-n>     116  </q-n></a>
<a name="117"><q-n>     117  </q-n></a>	<q-w>endtask</q-w>
<a name="118"><q-n>     118  </q-n></a>
<a name="119"><q-n>     119  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> single_Read_sequence();
<a name="120"><q-n>     120  </q-n></a>
<a name="121"><q-n>     121  </q-n></a>		trans.ARADDR = 'h001150aa+i;
<a name="122"><q-n>     122  </q-n></a>		trans.ARVALID = 'b1;
<a name="123"><q-n>     123  </q-n></a>
<a name="124"><q-n>     124  </q-n></a>		<q-m>// trans.RDATA = trans.WDATA;</q-m>
<a name="125"><q-n>     125  </q-n></a>		<q-m>// trans.RVALID = 'b1;</q-m>
<a name="126"><q-n>     126  </q-n></a>		i=i+1;
<a name="127"><q-n>     127  </q-n></a>	<q-w>endtask</q-w>
<a name="128"><q-n>     128  </q-n></a><q-w>endclass</q-w> : AXI_Single_Read_after_Write_Sequence
<a name="129"><q-n>     129  </q-n></a>
<a name="130"><q-n>     130  </q-n></a>
<a name="131"><q-n>     131  </q-n></a>    <q-m>// Sequence for Burst Write Sequence</q-m>
<a name="132"><q-n>     132  </q-n></a><q-w>class</q-w> AXI_Single_Burst_Write_Sequence <q-w>extends</q-w> AXI_base_Sequence;
<a name="133"><q-n>     133  </q-n></a>
<a name="134"><q-n>     134  </q-n></a>	`uvm_object_utils(AXI_Single_Burst_Write_Sequence)
<a name="135"><q-n>     135  </q-n></a>
<a name="136"><q-n>     136  </q-n></a>	AXI_Packet trans;
<a name="137"><q-n>     137  </q-n></a>
<a name="138"><q-n>     138  </q-n></a>	<q-w>integer</q-w> i=0 ;
<a name="139"><q-n>     139  </q-n></a>
<a name="140"><q-n>     140  </q-n></a>	<q-m>//constructor</q-m>
<a name="141"><q-n>     141  </q-n></a>	<q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"AXI_Single_Burst_Write_Sequence"</q-l>);
<a name="142"><q-n>     142  </q-n></a>		<q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="143"><q-n>     143  </q-n></a>		`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Sequence_build-------------------------------"</q-l>,UVM_NONE)
<a name="144"><q-n>     144  </q-n></a>	<q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="145"><q-n>     145  </q-n></a>
<a name="146"><q-n>     146  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="147"><q-n>     147  </q-n></a>		<q-w>repeat</q-w>(5)<q-w>begin</q-w>
<a name="148"><q-n>     148  </q-n></a>			`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Sequence_started-------------------------------"</q-l>,UVM_NONE)
<a name="149"><q-n>     149  </q-n></a>			trans=AXI_Packet::type_id::create(<q-l>"trans"</q-l>);
<a name="150"><q-n>     150  </q-n></a>			start_item(trans);
<a name="151"><q-n>     151  </q-n></a>			<q-m>// assert(trans.randomize());</q-m>
<a name="152"><q-n>     152  </q-n></a>            Single_Write_sequence();
<a name="153"><q-n>     153  </q-n></a>			`uvm_info(get_full_name(),<q-l>"################################-AXI Generated Packet-############################"</q-l>,UVM_NONE)
<a name="154"><q-n>     154  </q-n></a>			trans.print();
<a name="155"><q-n>     155  </q-n></a>			finish_item(trans);
<a name="156"><q-n>     156  </q-n></a>		<q-w>end</q-w>
<a name="157"><q-n>     157  </q-n></a>	<q-w>endtask</q-w> : body
<a name="158"><q-n>     158  </q-n></a>
<a name="159"><q-n>     159  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> Single_Write_sequence();
<a name="160"><q-n>     160  </q-n></a>
<a name="161"><q-n>     161  </q-n></a>		trans.AWADDR = 'h001150aa+i;
<a name="162"><q-n>     162  </q-n></a>		trans.AWVALID = 'b1;
<a name="163"><q-n>     163  </q-n></a>
<a name="164"><q-n>     164  </q-n></a>		trans.WDATA = 'haa005511+i*3;
<a name="165"><q-n>     165  </q-n></a>		trans.WVALID = 'b1;
<a name="166"><q-n>     166  </q-n></a>
<a name="167"><q-n>     167  </q-n></a>        i=i+1;
<a name="168"><q-n>     168  </q-n></a>	<q-w>endtask</q-w>
<a name="169"><q-n>     169  </q-n></a>
<a name="170"><q-n>     170  </q-n></a><q-w>endclass</q-w> : AXI_Single_Burst_Write_Sequence
<a name="171"><q-n>     171  </q-n></a>
<a name="172"><q-n>     172  </q-n></a>
<a name="173"><q-n>     173  </q-n></a>   <q-m>// Sequence for Burst Read after Write Sequence</q-m>
<a name="174"><q-n>     174  </q-n></a><q-w>class</q-w> AXI_Burst_Read_after_Write_Sequence <q-w>extends</q-w> AXI_base_Sequence;
<a name="175"><q-n>     175  </q-n></a>
<a name="176"><q-n>     176  </q-n></a>	`uvm_object_utils(AXI_Burst_Read_after_Write_Sequence)
<a name="177"><q-n>     177  </q-n></a>
<a name="178"><q-n>     178  </q-n></a>	AXI_Packet trans;
<a name="179"><q-n>     179  </q-n></a>
<a name="180"><q-n>     180  </q-n></a>	<q-w>integer</q-w> i=0 ;
<a name="181"><q-n>     181  </q-n></a>
<a name="182"><q-n>     182  </q-n></a>	<q-m>//constructor</q-m>
<a name="183"><q-n>     183  </q-n></a>	<q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"AXI_Burst_Read_after_Write_Sequence"</q-l>);
<a name="184"><q-n>     184  </q-n></a>		<q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="185"><q-n>     185  </q-n></a>		`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Sequence_build-------------------------------"</q-l>,UVM_NONE)
<a name="186"><q-n>     186  </q-n></a>	<q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="187"><q-n>     187  </q-n></a>
<a name="188"><q-n>     188  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="189"><q-n>     189  </q-n></a>		<q-w>repeat</q-w>(100)<q-w>begin</q-w>
<a name="190"><q-n>     190  </q-n></a>			`uvm_info(get_full_name(),<q-l>"-------------------------AXI_Sequence_started-------------------------------"</q-l>,UVM_NONE)
<a name="191"><q-n>     191  </q-n></a>			trans=AXI_Packet::type_id::create(<q-l>"trans"</q-l>);
<a name="192"><q-n>     192  </q-n></a>			start_item(trans);
<a name="193"><q-n>     193  </q-n></a>			<q-m>// assert(trans.randomize());</q-m>
<a name="194"><q-n>     194  </q-n></a>			Single_Write_sequence();
<a name="195"><q-n>     195  </q-n></a>			single_Read_sequence();
<a name="196"><q-n>     196  </q-n></a>			`uvm_info(get_full_name(),<q-l>"################################-AXI Generated Packet-############################"</q-l>,UVM_NONE)
<a name="197"><q-n>     197  </q-n></a>			trans.print();
<a name="198"><q-n>     198  </q-n></a>			finish_item(trans);
<a name="199"><q-n>     199  </q-n></a>		<q-w>end</q-w>
<a name="200"><q-n>     200  </q-n></a>	<q-w>endtask</q-w> : body
<a name="201"><q-n>     201  </q-n></a>
<a name="202"><q-n>     202  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> Single_Write_sequence();
<a name="203"><q-n>     203  </q-n></a>
<a name="204"><q-n>     204  </q-n></a>		trans.AWADDR = 'h001150aa+i;
<a name="205"><q-n>     205  </q-n></a>		trans.AWVALID = 'b1;
<a name="206"><q-n>     206  </q-n></a>
<a name="207"><q-n>     207  </q-n></a>		trans.WDATA = 'haa005511+i*2;
<a name="208"><q-n>     208  </q-n></a>		trans.WVALID = 'b1;
<a name="209"><q-n>     209  </q-n></a>   
<a name="210"><q-n>     210  </q-n></a>
<a name="211"><q-n>     211  </q-n></a>	<q-w>endtask</q-w>
<a name="212"><q-n>     212  </q-n></a>
<a name="213"><q-n>     213  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> single_Read_sequence();
<a name="214"><q-n>     214  </q-n></a>
<a name="215"><q-n>     215  </q-n></a>		trans.ARADDR = 'h001150aa+i;
<a name="216"><q-n>     216  </q-n></a>		trans.ARVALID = 'b1;
<a name="217"><q-n>     217  </q-n></a>
<a name="218"><q-n>     218  </q-n></a>		i=i+1;
<a name="219"><q-n>     219  </q-n></a>	<q-w>endtask</q-w>
<a name="220"><q-n>     220  </q-n></a><q-w>endclass</q-w> : AXI_Burst_Read_after_Write_Sequence
<a name="221"><q-n>     221  </q-n></a>
<a name="222"><q-n>     222  </q-n></a>
</pre>
</tt>

  
</body>
</html>
