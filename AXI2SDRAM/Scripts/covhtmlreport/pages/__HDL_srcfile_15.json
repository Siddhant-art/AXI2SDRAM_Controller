var g_sourceLines = [
'class AXI_Monitor extends uvm_monitor;',
'',
'	`uvm_component_utils(AXI_Monitor)',
'',
'    virtual AXI_Interface axi_intf;',
'',
'    AXI_Packet axi_pkt;',
'',
'    uvm_analysis_port #(AXI_Packet) item_collected_port;',
'',
'	function new (string name, uvm_component parent);',
'		super.new(name, parent);',
'		item_collected_port = new("item_collected_port", this);',
'	endfunction : new',
'',
'	function void build_phase(uvm_phase phase);',
'		super.build_phase(phase);',
'		axi_pkt=new();',
'		`uvm_info(get_full_name(),"-------------------------AXI_Monitor_build-------------------------------",UVM_NONE)',
'		if(!uvm_config_db#(virtual AXI_Interface)::get(this, "", "a_vif", axi_intf))',
'       		`uvm_fatal("NO_VIF",{"virtual interface must be set for: ",get_full_name(),".a_vif"});',
'	endfunction : build_phase',
'',
'	virtual task run_phase(uvm_phase phase);',
'    forever begin',
'    		capture_axi_write();',
'      		capture_axi_read();',
'      		`uvm_info(get_full_name(),"-------------------------AXI_Monitor_data-------------------------------",UVM_NONE)',
'        	// axi_pkt.print();',
'	  		item_collected_port.write(axi_pkt);',
'      	end ',
'  endtask : run_phase',
'',
'',
'    virtual task capture_axi_write();',
'      	@(posedge axi_intf.ACLK);',
'    ',
'		   // Write address channel signals',
'',
'		    // Signal from TB to DUT',
'		   // axi_pkt.AWID    = axi_intf.AWID;            //signal for AXI4_lite',
'		   axi_pkt.AWADDR  = axi_intf.AWADDR;',
'		   // axi_pkt.AWLEN   = axi_intf.AWLEN;',
'		   // axi_pkt.AWSIZE  = axi_intf.AWSIZE;',
'		   // axi_pkt.AWBURST = axi_intf.AWBURST;',
'		   // axi_pkt.AWLOCK  = axi_intf.AWLOCK;',
'		   // axi_pkt.AWCACHE = axi_intf.AWCACHE;  ',
'		   // axi_pkt.AWPROT  = axi_intf.AWPROT;',
'		   axi_pkt.AWVALID = axi_intf.AWVALID;',
'',
'		   // Signal from DUT to TB',
'		   axi_pkt.AWREADY  = axi_intf.AWREADY;',
'',
'		   // Write data channel signals',
'',
'		    // Signal from TB to DUT',
'		   // axi_pkt.WID     = axi_intf.WID;',
'		   axi_pkt.WDATA   = axi_intf.WDATA;',
'		   axi_pkt.WSTRB   = axi_intf.WSTRB;',
'		   // axi_pkt.WLAST   = axi_intf.WLAST;',
'		   axi_pkt.WVALID  = axi_intf.WVALID;',
'',
'		    // Signal from DUT to TB',
'		   axi_pkt.WREADY   = axi_intf.WREADY;',
'',
'		   // Write response channel signals',
'',
'		    // Signal from DUT to TB',
'		   // axi_pkt.BID     =  axi_intf.BID;',
'		   axi_pkt.BRESP   =  axi_intf.BRESP;   ',
'		   axi_pkt.BVALID  =  axi_intf.BVALID;',
'',
'	        // Signal from TB to DUT',
'		   axi_pkt.BREADY =  axi_intf.BREADY;',
'        ',
'      	// `uvm_info(get_full_name(),"-------------------------Packet_write_sampled-------------------------------",UVM_NONE)',
'    endtask',
'',
'    virtual task capture_axi_read();',
'      	@(posedge axi_intf.ACLK);',
'      	 // Signal from TB to DUT',
'	   // axi_pkt.ARID    = axi_intf.ARID;',
'	   axi_pkt.ARADDR  = axi_intf.ARADDR;',
'	   // axi_pkt.ARLEN   = axi_intf.ARLEN;',
'	   // axi_pkt.ARSIZE  = axi_intf.ARSIZE;',
'	   // axi_pkt.ARBURST = axi_intf.ARBURST;',
'	   // axi_pkt.ARLOCK  = axi_intf.ARLOCK;',
'	   // axi_pkt.ARCACHE = axi_intf.ARCACHE; ',
'	   // axi_pkt.ARPROT  = axi_intf.ARPROT;',
'	   axi_pkt.ARVALID = axi_intf.ARVALID;',
'',
'         // Signal from DUT to TB',
'	   axi_pkt.ARREADY  =  axi_intf.ARREADY;',
'',
'	   // Read data channel signals',
'',
'	    // Signal from DUT to TB',
'	   // axi_pkt.RID      = axi_intf.RID ;',
'	   axi_pkt.RDATA    = axi_intf.RDATA ;',
'	   axi_pkt.RRESP    = axi_intf.RRESP;',
'	   // axi_pkt.RLAST    = axi_intf.RLAST;',
'	   axi_pkt.RVALID   = axi_intf.RVALID ;',
'',
'         // Signal from TB to DUT',
'	   axi_pkt.RREADY =  axi_intf.RREADY;',
'',
'      	// `uvm_info(get_full_name(),"-------------------------Packet_Read_sampled-------------------------------",UVM_NONE)',
'    endtask',
'',
'',
'endclass : AXI_Monitor'
];
countinueBuildStmtTable(g_sourceLines);
