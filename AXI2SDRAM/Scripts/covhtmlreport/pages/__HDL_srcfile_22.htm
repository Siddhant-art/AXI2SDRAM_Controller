
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>class</q-w> SDRAM_Monitor <q-w>extends</q-w> uvm_monitor;
<a name="2"><q-n>     2  </q-n></a>
<a name="3"><q-n>     3  </q-n></a>	`uvm_component_utils(SDRAM_Monitor)
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a>    <q-w>virtual</q-w> SDRAM_Interface sdram_intf;
<a name="6"><q-n>     6  </q-n></a>
<a name="7"><q-n>     7  </q-n></a>    SDRAM_Packet sdram_pkt;
<a name="8"><q-n>     8  </q-n></a>
<a name="9"><q-n>     9  </q-n></a>    uvm_analysis_port #(SDRAM_Packet) item_collected_port;
<a name="10"><q-n>     10  </q-n></a>
<a name="11"><q-n>     11  </q-n></a>	<q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name, uvm_component parent);
<a name="12"><q-n>     12  </q-n></a>		<q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="13"><q-n>     13  </q-n></a>		item_collected_port = <q-w>new</q-w>(<q-l>"item_collected_port"</q-l>, <q-w>this</q-w>);
<a name="14"><q-n>     14  </q-n></a>	<q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>	<q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="17"><q-n>     17  </q-n></a>		<q-w>super</q-w>.build_phase(phase);
<a name="18"><q-n>     18  </q-n></a>		sdram_pkt=<q-w>new</q-w>();
<a name="19"><q-n>     19  </q-n></a>		`uvm_info(get_full_name(),<q-l>"-------------------------SDRAM_Monitor_build-------------------------------"</q-l>,UVM_NONE)
<a name="20"><q-n>     20  </q-n></a>		<q-w>if</q-w>(!uvm_config_db#(<q-w>virtual</q-w> SDRAM_Interface)::get(<q-w>this</q-w>, <q-l>""</q-l>, <q-l>"s_vif"</q-l>, sdram_intf))
<a name="21"><q-n>     21  </q-n></a>       		`uvm_fatal(<q-l>"NO_VIF"</q-l>,{<q-l>"virtual interface must be set for: "</q-l>,get_full_name(),<q-l>".s_vif"</q-l>});
<a name="22"><q-n>     22  </q-n></a>	<q-w>endfunction</q-w> : build_phase
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>	
<a name="25"><q-n>     25  </q-n></a>	<q-w>virtual</q-w> <q-w>task</q-w> run_phase(uvm_phase phase);
<a name="26"><q-n>     26  </q-n></a>    <q-w>forever</q-w> <q-w>begin</q-w>
<a name="27"><q-n>     27  </q-n></a>    		capture_sdram();
<a name="28"><q-n>     28  </q-n></a>      		`uvm_info(get_full_name(),<q-l>"-------------------------SDRAM_Monitor_data-------------------------------"</q-l>,UVM_NONE)
<a name="29"><q-n>     29  </q-n></a>        	<q-m>// sdram_pkt.print();</q-m>
<a name="30"><q-n>     30  </q-n></a>	  		item_collected_port.write(sdram_pkt);
<a name="31"><q-n>     31  </q-n></a>      	<q-w>end</q-w> 
<a name="32"><q-n>     32  </q-n></a>  <q-w>endtask</q-w> : run_phase
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> capture_sdram();
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a>        @(<q-a>posedge</q-w> sdram_intf.CLK);
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a>      sdram_pkt.RAS  = sdram_intf.RAS;
<a name="39"><q-n>     39  </q-n></a>	    sdram_pkt.CAS  = sdram_intf.CAS;
<a name="40"><q-n>     40  </q-n></a>	    sdram_pkt.WE   = sdram_intf.WE;
<a name="41"><q-n>     41  </q-n></a>	    sdram_pkt.CS   = sdram_intf.CS;
<a name="42"><q-n>     42  </q-n></a>	    sdram_pkt.A    = sdram_intf.A;   
<a name="43"><q-n>     43  </q-n></a>	    sdram_pkt.BA   = sdram_intf.BA;
<a name="44"><q-n>     44  </q-n></a>	    sdram_pkt.DQ   = sdram_intf.DQ;
<a name="45"><q-n>     45  </q-n></a>	    sdram_pkt.DQM  = sdram_intf.DQM;
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>	  <q-w>endtask</q-w> : capture_sdram
<a name="48"><q-n>     48  </q-n></a>
<a name="49"><q-n>     49  </q-n></a><q-w>endclass</q-w> : SDRAM_Monitor</pre>
</tt>

  
</body>
</html>
