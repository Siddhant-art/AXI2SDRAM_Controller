
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`<q-a>timescale</q-w> 1<q-v>ns</q-w>/1<q-v>ps</q-w>
<a name="2"><q-n>     2  </q-n></a>
<a name="3"><q-n>     3  </q-n></a>`<q-i>include</q-w> <q-l>"AXI_SDRAM_Pkg.sv"</q-l>
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a><q-w>module</q-w> tb_top;
<a name="6"><q-n>     6  </q-n></a>  
<a name="7"><q-n>     7  </q-n></a><q-m>//clock and reset signal declaration</q-m>
<a name="8"><q-n>     8  </q-n></a>  <q-w>bit</q-w> ACLK;
<a name="9"><q-n>     9  </q-n></a>  <q-w>bit</q-w> ARESETn;
<a name="10"><q-n>     10  </q-n></a>  <q-w>bit</q-w> CLK;
<a name="11"><q-n>     11  </q-n></a>  <q-w>bit</q-w> CKE;
<a name="12"><q-n>     12  </q-n></a>  <q-w>bit</q-w> RESETn;
<a name="13"><q-n>     13  </q-n></a>
<a name="14"><q-n>     14  </q-n></a>  <q-w>wire</q-w>  [15:0]  DQ_temp;
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>  <q-m>//clock generation</q-m>
<a name="17"><q-n>     17  </q-n></a>  <q-w>always</q-w> #2.22 ACLK = ~ACLK;  <q-m>// AXI Frequency = 225 Mhz</q-m>
<a name="18"><q-n>     18  </q-n></a>  <q-w>always</q-w> #3.01 CLK  = ~CLK;   <q-m>// SD  Frequency = 166 Mhz</q-m>
<a name="19"><q-n>     19  </q-n></a>  
<a name="20"><q-n>     20  </q-n></a>  <q-m>//reset Generation</q-m>
<a name="21"><q-n>     21  </q-n></a>  <q-w>initial</q-w> 
<a name="22"><q-n>     22  </q-n></a>  <q-w>begin</q-w>
<a name="23"><q-n>     23  </q-n></a>      ACLK    = 0;
<a name="24"><q-n>     24  </q-n></a>      CLK     = 0;
<a name="25"><q-n>     25  </q-n></a>      ARESETn = 1;
<a name="26"><q-n>     26  </q-n></a>      RESETn  = 1;
<a name="27"><q-n>     27  </q-n></a>      CKE     = 0;
<a name="28"><q-n>     28  </q-n></a>      #5 
<a name="29"><q-n>     29  </q-n></a>      ARESETn = 0;
<a name="30"><q-n>     30  </q-n></a>      RESETn  = 0;
<a name="31"><q-n>     31  </q-n></a>      CKE     = 1;
<a name="32"><q-n>     32  </q-n></a>  <q-w>end</q-w>
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>  AXI_Interface   axi_intf(ACLK,ARESETn);     <q-m>//this clock needs to be changed</q-m>
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a>  SDRAM_Interface sdram_intf(CLK,CKE,RESETn);
<a name="37"><q-n>     37  </q-n></a>
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a>  AXI2SDRAM DUT(   
<a name="40"><q-n>     40  </q-n></a>    .ACLK(ACLK),                           <q-m>//Global Clock Signal</q-m>
<a name="41"><q-n>     41  </q-n></a>    .ARESETn(ARESETn),                          <q-m>//global reset signal(active low)</q-m>
<a name="42"><q-n>     42  </q-n></a>    
<a name="43"><q-n>     43  </q-n></a><q-m>//AXI Read Address channel signals</q-m>
<a name="44"><q-n>     44  </q-n></a>    <q-m>// .ARLEN(axi_intf.ARLEN),</q-m>
<a name="45"><q-n>     45  </q-n></a>    <q-m>// .ARID(axi_intf.ARID),</q-m>
<a name="46"><q-n>     46  </q-n></a>    .ARADDR(axi_intf.ARADDR),
<a name="47"><q-n>     47  </q-n></a>    <q-m>// .ARSIZE(axi_intf.ARSIZE),</q-m>
<a name="48"><q-n>     48  </q-n></a>    <q-m>// .ARBURST(axi_intf.ARBURST),</q-m>
<a name="49"><q-n>     49  </q-n></a>    .ARVALID(axi_intf.ARVALID),
<a name="50"><q-n>     50  </q-n></a>    .ARREADY(axi_intf.ARREADY),
<a name="51"><q-n>     51  </q-n></a>
<a name="52"><q-n>     52  </q-n></a><q-m>//AXI Write Address channel signals</q-m>
<a name="53"><q-n>     53  </q-n></a>    <q-m>// .AWID(axi_intf.AWID),</q-m>
<a name="54"><q-n>     54  </q-n></a>    .AWADDR(axi_intf.AWADDR),
<a name="55"><q-n>     55  </q-n></a>    <q-m>// .AWLEN(axi_intf.AWLEN),</q-m>
<a name="56"><q-n>     56  </q-n></a>    <q-m>// .AWSIZE(axi_intf.AWSIZE),</q-m>
<a name="57"><q-n>     57  </q-n></a>    <q-m>// .AWBURST(axi_intf.AWBURST),</q-m>
<a name="58"><q-n>     58  </q-n></a>    .AWVALID(axi_intf.AWVALID),
<a name="59"><q-n>     59  </q-n></a>    .AWREADY(axi_intf.AWREADY),
<a name="60"><q-n>     60  </q-n></a>
<a name="61"><q-n>     61  </q-n></a><q-m>//AXI Read data channel signals</q-m>
<a name="62"><q-n>     62  </q-n></a>    <q-m>// .RID(axi_intf.RID),</q-m>
<a name="63"><q-n>     63  </q-n></a>    .RDATA(axi_intf.RDATA),
<a name="64"><q-n>     64  </q-n></a>    .RRESP(axi_intf.RRESP),
<a name="65"><q-n>     65  </q-n></a>    <q-m>// .RLAST(axi_intf.RLAST),</q-m>
<a name="66"><q-n>     66  </q-n></a>    .RVALID(axi_intf.RVALID),
<a name="67"><q-n>     67  </q-n></a>    .RREADY(axi_intf.RREADY),
<a name="68"><q-n>     68  </q-n></a>
<a name="69"><q-n>     69  </q-n></a><q-m>//AXI Write data channel signals</q-m>
<a name="70"><q-n>     70  </q-n></a>    <q-m>// .WID(axi_intf.WID),</q-m>
<a name="71"><q-n>     71  </q-n></a>    .WDATA(axi_intf.WDATA),
<a name="72"><q-n>     72  </q-n></a>    .WSTRB(axi_intf.WSTRB),
<a name="73"><q-n>     73  </q-n></a>    <q-m>// .WLAST(axi_intf.WLAST),</q-m>
<a name="74"><q-n>     74  </q-n></a>    .WVALID(axi_intf.WVALID),
<a name="75"><q-n>     75  </q-n></a>    .WREADY(axi_intf.WREADY),        
<a name="76"><q-n>     76  </q-n></a>
<a name="77"><q-n>     77  </q-n></a><q-m>//AXI Write Response channel signals</q-m>
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>    <q-m>// .BID(axi_intf.BID),</q-m>
<a name="80"><q-n>     80  </q-n></a>    .BRESP(axi_intf.BRESP),
<a name="81"><q-n>     81  </q-n></a>    .BVALID(axi_intf.BVALID),
<a name="82"><q-n>     82  </q-n></a>    .BREADY(axi_intf.BREADY),
<a name="83"><q-n>     83  </q-n></a>
<a name="84"><q-n>     84  </q-n></a><q-m>//sdram controller output Signals</q-m>
<a name="85"><q-n>     85  </q-n></a>
<a name="86"><q-n>     86  </q-n></a>    .sdram_clk_o(CLK),          <q-m>//output clock to the sdram</q-m>
<a name="87"><q-n>     87  </q-n></a>    .sdram_cke_o(CKE),
<a name="88"><q-n>     88  </q-n></a>    .sdram_cs_o(sdram_intf.CS),
<a name="89"><q-n>     89  </q-n></a>    .sdram_cas_o(sdram_intf.CAS),
<a name="90"><q-n>     90  </q-n></a>    .sdram_ras_o(sdram_intf.RAS),
<a name="91"><q-n>     91  </q-n></a>    .sdram_we_o(sdram_intf.WE),
<a name="92"><q-n>     92  </q-n></a>    .sdram_ba_o(sdram_intf.BA),           <q-m>//two banks</q-m>
<a name="93"><q-n>     93  </q-n></a>    .sdram_a_o(sdram_intf.A),
<a name="94"><q-n>     94  </q-n></a>    .sdram_dq_io(DQ_temp),          <q-m>//bidirectional port</q-m>
<a name="95"><q-n>     95  </q-n></a>    .sdram_dqm_o(sdram_intf.DQM)           <q-m>//data mask</q-m>
<a name="96"><q-n>     96  </q-n></a>
<a name="97"><q-n>     97  </q-n></a>  ) ;
<a name="98"><q-n>     98  </q-n></a>
<a name="99"><q-n>     99  </q-n></a>  mt48lc16m16a2 SIM_Model(
<a name="100"><q-n>     100  </q-n></a>       .Dq(DQ_temp), 
<a name="101"><q-n>     101  </q-n></a>       .Addr(sdram_intf.A), 
<a name="102"><q-n>     102  </q-n></a>       .Ba(sdram_intf.BA), 
<a name="103"><q-n>     103  </q-n></a>       .Clk(CLK), 
<a name="104"><q-n>     104  </q-n></a>       .Cke(CKE), 
<a name="105"><q-n>     105  </q-n></a>       .Cs_n(sdram_intf.CS), 
<a name="106"><q-n>     106  </q-n></a>       .Ras_n(sdram_intf.RAS), 
<a name="107"><q-n>     107  </q-n></a>       .Cas_n(sdram_intf.CAS), 
<a name="108"><q-n>     108  </q-n></a>       .We_n(sdram_intf.WE), 
<a name="109"><q-n>     109  </q-n></a>       .Dqm(sdram_intf.DQM)
<a name="110"><q-n>     110  </q-n></a>       );
<a name="111"><q-n>     111  </q-n></a>
<a name="112"><q-n>     112  </q-n></a>  <q-w>assign</q-w> DQ_temp = sdram_intf.DQ;
<a name="113"><q-n>     113  </q-n></a>
<a name="114"><q-n>     114  </q-n></a>  <q-m>//simulation model needs to integrate here</q-m>
<a name="115"><q-n>     115  </q-n></a>
<a name="116"><q-n>     116  </q-n></a>
<a name="117"><q-n>     117  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w> 
<a name="118"><q-n>     118  </q-n></a>  	uvm_config_db#(<q-w>virtual</q-w>   AXI_Interface)::set(uvm_root::get(),<q-l>"uvm_test_top.env.axi_agt.axi_drv"</q-l>,  <q-l>"a_vif"</q-l>,axi_intf);
<a name="119"><q-n>     119  </q-n></a>  	uvm_config_db#(<q-w>virtual</q-w>   AXI_Interface)::set(uvm_root::get(),<q-l>"uvm_test_top.env.axi_agt.axi_mon"</q-l>,  <q-l>"a_vif"</q-l>,axi_intf);
<a name="120"><q-n>     120  </q-n></a>    uvm_config_db#(<q-w>virtual</q-w> SDRAM_Interface)::set(uvm_root::get(),<q-l>"uvm_test_top.env.sdram_agt.sdm_drv"</q-l>,<q-l>"s_vif"</q-l>,sdram_intf);
<a name="121"><q-n>     121  </q-n></a>    uvm_config_db#(<q-w>virtual</q-w> SDRAM_Interface)::set(uvm_root::get(),<q-l>"uvm_test_top.env.sdram_agt.sdm_mon"</q-l>,<q-l>"s_vif"</q-l>,sdram_intf);
<a name="122"><q-n>     122  </q-n></a>     <q-m>//run_test("AXI_Burst_Read_after_Write_Test");</q-m>
<a name="123"><q-n>     123  </q-n></a>    run_test();
<a name="124"><q-n>     124  </q-n></a>  <q-w>end</q-w>
<a name="125"><q-n>     125  </q-n></a>
<a name="126"><q-n>     126  </q-n></a>
<a name="127"><q-n>     127  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w>
<a name="128"><q-n>     128  </q-n></a>  		$dumpfile(<q-l>"waveform.vcd"</q-l>);
<a name="129"><q-n>     129  </q-n></a>  		$dumpvars(0, DUT,SIM_Model,axi_intf,sdram_intf);
<a name="130"><q-n>     130  </q-n></a>  <q-w>end</q-w>
<a name="131"><q-n>     131  </q-n></a>
<a name="132"><q-n>     132  </q-n></a><q-w>endmodule</q-w></pre>
</tt>

  
</body>
</html>
