var g_sourceLines = [
'module SDRAM_Controller#(',
'				SDRAM_ADDR_WIDTH = 13,',
'				SDRAM_DATA_WIDTH = 16,',
'				SDRAM_BANK_WIDTH = 2,',
'				SIZE	     = 32',
'			)(',
'		//input from TB',
'		input   logic SDRAM_CLK,',
'		input 	logic SDRAM_RESET,',
'',
'		output  logic SD_RD_ADDR_EN,	',
'		output  logic SD_RD_DATA_EN,',
'		output  logic SD_WR_ADDR_EN,	',
'		output  logic SD_WR_DATA_EN,',
'',
'		input   logic [SIZE-1:0] SD_WR_ADDR_OUT,	',
'		input   logic [SIZE-1:0] SD_WR_DATA_OUT,',
'		input   logic [SIZE-1:0] SD_RD_ADDR_OUT,	',
'		output  logic [SIZE-1:0] SD_RD_DATA_IN,',
'',
'		input   logic WADDR_FIFO_FULL,',
'		input   logic WADDR_FIFO_EMPTY,',
'		input   logic WDATA_FIFO_FULL,',
'		input   logic WDATA_FIFO_EMPTY,',
'		input   logic RADDR_FIFO_FULL,',
'		input   logic RADDR_FIFO_EMPTY,',
'		input   logic RDATA_FIFO_FULL,',
'		input   logic RDATA_FIFO_EMPTY,',
'',
'		output 	logic							sdram_clk_o,					//output clock to the sdram',
'		output 	logic							sdram_cke_o,',
'		output 	logic							sdram_cs_o,',
'		output 	logic							sdram_cas_o,',
'		output 	logic							sdram_ras_o,',
'		output 	logic							sdram_we_o,',
'		output 	logic	[SDRAM_BANK_WIDTH-1:0]	sdram_ba_o,						//two banks',
'		output 	logic	[SDRAM_ADDR_WIDTH-1:0] 	sdram_a_o,',
'		inout  	logic	[SDRAM_DATA_WIDTH-1:0]	sdram_dq_io,					//bidirectional port***************************need to drive',
'		output 	logic	[1:0]					sdram_dqm_o 					//data mask',
'',
');',
'',
'	reg [3:0] nxt_op_state;',
'	reg	[SDRAM_DATA_WIDTH-1:0]	sdram_dq_io_reg;',
'',
'	reg [15:0] init_delay_counter;',
'	reg [1:0]  init_refresh_counter;',
'',
'        always_ff @(posedge SDRAM_CLK) begin',
'            if(SDRAM_RESET) begin				',
'				sdram_cas_o		&lt;= \'b0;',
'				sdram_ras_o		&lt;= \'b0;',
'				sdram_we_o		&lt;= \'b0;',
'				sdram_ba_o		&lt;= \'b0;			',
'				sdram_a_o		&lt;= \'b0;',
'				sdram_dq_io_reg &lt;= \'b0;',
'				sdram_dqm_o		&lt;= \'b0;',
'				nxt_op_state	&lt;= \'b0;     ',
'            end ',
'            else begin',
'                case (nxt_op_state)',
'                    4\'b0000:  begin   //INIT_DELAY',
'',
'                    	//100us delay generation with counter at 166MHz',
'                    	init_delay_counter = init_delay_counter +1\'b1;',
'',
'                    	if(init_delay_counter &gt;= \'d16600) begin',
'                    		nxt_op_state &lt;= 4\'b0001;				//nex_state --&gt; Precharge State',
'                    	end',
'',
'                       //NO_OPERATION_COMMAND				',
'						sdram_cas_o			&lt;=\'b0;',
'						sdram_cas_o			&lt;=\'b1;',
'						sdram_ras_o			&lt;=\'b1;',
'						sdram_we_o			&lt;=\'b1;',
'						// sdram_ba_o		&lt;=\'b0;			',
'						// sdram_a_o		&lt;=\'b0;',
'						// sdram_dq_io_reg	&lt;=\'b0;',
'						// sdram_dqm_o		&lt;=\'b0;      ',
'                    end',
'',
'                    4\'b0001:  begin   //PRECHARGE 							// just waiting in the precharge state',
'                        //PRECHARGE_COMMAND',
'                        sdram_cs_o&lt;=\'b0;',
'						sdram_cas_o&lt;=\'b0;',
'						sdram_ras_o&lt;=\'b1;',
'						sdram_we_o&lt;=\'b0;',
'						sdram_ba_o&lt;=\'b0;		//Needs to be driven		',
'						// sdram_a_o&lt;=\'b0;',
'						// sdram_dq_io_reg&lt;=\'b0;',
'						// sdram_dqm_o&lt;=\'b0;  	',
'						// sdram_a_o[10]&lt;=\'b0;	//Needs to be driven (ALL_BANKS)   ',
'						nxt_op_state &lt;= 4\'b0010;                                              ',
'                    end',
'',
'                    4\'b0010:  begin   //WAIT',
'						if(init_refresh_counter &gt;=2\'b10)begin',
'                    		nxt_op_state &lt;= 4\'b0101;',
'                    	end',
'                    	else begin',
'                    		nxt_op_state &lt;= 4\'b0100;',
'                    	end                            ',
'                    end',
'',
'                    4\'b0011:  begin   //IDLE',
'                                                                             ',
'                    end                   ',
'',
'                    4\'b0100:  begin   //INIT_REFRESH',
'',
'                    	init_refresh_counter = init_refresh_counter + 1\'b1;',
'                    	nxt_op_state &lt;= 4\'b0010;',
'                    	',
'                    	//REFRESH_COMMAND',
'                    	sdram_cs_o&lt;=\'b0;',
'						sdram_cas_o&lt;=\'b0;',
'						sdram_ras_o&lt;=\'b0;',
'						sdram_we_o&lt;=\'b1;',
'						// sdram_ba_o&lt;=\'b0;		//Needs to be driven		',
'						// sdram_a_o&lt;=\'b0;',
'						// sdram_dq_io_reg&lt;=\'b0;',
'						// sdram_dqm_o&lt;=\'b0;  	',
'						// sdram_a_o[10]&lt;=\'b0;	//Needs to be driven (ALL_BANKS)                                             ',
'                    end',
'',
'                    4\'b0101:  begin   //LOAD_MODE_REGISTER',
'',
'						nxt_op_state &lt;= 4\'b0010;',
'',
'                    	//LOAD_MODE_REGISTER_COMMAND',
'                    	sdram_cs_o&lt;=\'b0;',
'						sdram_cas_o&lt;=\'b0;',
'						sdram_ras_o&lt;=\'b0;',
'						sdram_we_o&lt;=\'b0;',
'						// sdram_ba_o&lt;=\'b0;		//Needs to be driven (opcode)		',
'						sdram_a_o&lt;=\'b0001000100000;		//Needs to be driven (opcode)	',
'						// sdram_dq_io_reg&lt;=\'b0;',
'						// sdram_dqm_o&lt;=\'b0;',
'',
'                    end',
'',
'                    4\'b0110:  begin   //REFRESH',
'',
'',
'                        //REFRESH_COMMAND',
'                    	sdram_cs_o&lt;=\'b0;',
'						sdram_cas_o&lt;=\'b0;',
'						sdram_ras_o&lt;=\'b0;',
'						sdram_we_o&lt;=\'b1;',
'						// sdram_ba_o&lt;=\'b0;		//Needs to be driven		',
'						// sdram_a_o&lt;=\'b0;',
'						// sdram_dq_io_reg&lt;=\'b0;',
'						// sdram_dqm_o&lt;=\'b0;  	',
'						// sdram_a_o[10]&lt;=\'b0;	//Needs to be driven (ALL_BANKS)     ',
'                    end',
'',
'                    4\'b0111:  begin   //ACTIVE',
'                         ',
'                    	//LOAD_MODE_REGISTER_COMMAND',
'                    	sdram_cs_o&lt;=\'b0;',
'						sdram_cas_o&lt;=\'b0;',
'						sdram_ras_o&lt;=\'b1;',
'						sdram_we_o&lt;=\'b1;',
'						// sdram_ba_o&lt;=\'b0;		//Needs to be driven (BANK)		',
'						// sdram_a_o&lt;=\'b0;		//Needs to be driven (ROW)	',
'						// sdram_dq_io_reg&lt;=\'b0;',
'						// sdram_dqm_o&lt;=\'b0;  ',
'                    end',
'',
'                    4\'b1000:  begin   //READ',
'                                    ',
'                        //READ_COMMAND',
'                    	sdram_cs_o&lt;=\'b0;',
'						sdram_cas_o&lt;=\'b1;',
'						sdram_ras_o&lt;=\'b0;',
'						sdram_we_o&lt;=\'b1;',
'						// sdram_ba_o&lt;=\'b0;		//Needs to be driven (BANK)		',
'						// sdram_a_o&lt;=\'b0;		//Needs to be driven (ROW)	',
'						// sdram_dq_io_reg&lt;=\'b0;',
'						// sdram_dqm_o&lt;=\'b0; 	//Needs to be driven (MASK)	 ',
'						//sdram_a_o[10]&lt;=\'b0;	//Needs to be driven (PRECHARGE)	',
'                    end',
'',
'                    4\'b1001:  begin   //WRITE',
'                                ',
'                        //WRITE_COMMAND',
'                    	sdram_cs_o&lt;=\'b0;',
'						sdram_cas_o&lt;=\'b1;',
'						sdram_ras_o&lt;=\'b0;',
'						sdram_we_o&lt;=\'b0;',
'						// sdram_ba_o&lt;=\'b0;		//Needs to be driven (BANK)		',
'						// sdram_a_o&lt;=\'b0;		//Needs to be driven (ROW)	',
'						// sdram_dq_io_reg&lt;=\'b0;',
'						// sdram_dqm_o&lt;=\'b0; 	//Needs to be driven (MASK)	 ',
'						//sdram_a_o[10]&lt;=\'b0;	//Needs to be driven (PRECHARGE)        ',
'                    end',
'',
'                    default : /* default*/ ;',
'                endcase',
'            end',
'        end',
'',
'assign sdram_clk_o = SDRAM_CLK;',
'assign sdram_cke_o = \'b1;',
'',
'// assign sdram_dq_io = (cs &amp;&amp; !wr_en &amp;&amp; out_en) ? sdram_dq_io_reg :\'bz; ',
'',
'endmodule : SDRAM_Controller'
];
countinueBuildStmtTable(g_sourceLines);
